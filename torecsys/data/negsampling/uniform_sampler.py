from . import _NegativeSampler
import torch

class UniformSamplerWithReplacement(_NegativeSampler):
    r"""UniformSamplerWithReplacement is to generate negative samplers by uniform distribution with replacement, i.e. draw samples uniformlly with replacement
    """
    @staticmethod
    def _getlen(v: Dict[str, int]) -> int:
        r"""Get length of field.
        
        Returns:
            int: Length of field.
        """
        return v["high"] - v["low"]

    @staticmethod
    def _generate(low  : int, 
                  high : int, 
                  size : int) -> torch.Tensor:
        r"""A function to generate negative samples with uniform distribution with replacement.
        
        Args:
            low (int): Lowest integer to be drawn from the distribution.
            high (int): One above the highest integer to be drawn from the distribution.
            size (int): An integer defining the shape of the output tensor.
        
        Returns:
            T, shape = (N * Nneg, 1), dtype = torch.long: Tensor of negative samples generated by uniform distribution.
        """
        return torch.randint(low=low, high=high, size=(size, 1)).long()


class UniformSamplerWithoutReplacement(_NegativeSampler):
    r"""UniformSamplerWithReplacement is to generate negative samplers by uniform distribution without replacement, i.e. draw samples uniformlly without replacement
    """
    @staticmethod
    def _getlen(v: Dict[str, int]) -> int:
        r"""Get length of field.
        
        Returns:
            int: Length of field.
        """
        return v["high"] - v["low"]

    @staticmethod
    def _generate(low  : int, 
                  high : int, 
                  size : int) -> torch.Tensor:
        """A function to generate negative samples with uniform distribution without replacement.
        
        Args:
            low (int): minimum value (i.e. lower bound) of sampling id.
            high (int): maximum value (i.e. upper bound) of sampling id.
            size (int): An integer of defining the shape of the output tensor.
        
        Returns:
            T, shape = (N * Nneg, 1), dtype = torch.long: Tensor of negative samples generated by uniform distribution.
        """
        samples = torch.randperm(n=high) + low
        samples = samples[:size]
        return samples.view(-1, 1)
