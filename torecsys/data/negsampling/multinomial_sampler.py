from . import _NegativeSampler
import torch
from typing import Dict

class MultinomialSampler(_NegativeSampler):
    r"""MutlinomialSampler is to generate negative samplers by multinomial distribution, i.e. draw samples by given probabilities
    """
    @staticmethod
    def _getlen(v: Dict[str, int]) -> int:
        r"""Get length of field.
        
        Returns:
            int: Length of field.
        """
        return len(v["weights"])
        
    def _generate(self, 
                  weights          : torch.Tensor,
                  with_replacement : bool,
                  size             : int) -> torch.Tensor:
        """A function to generate negative samples with multinomial distribution.
        
        Args:
            weights (torch.Tensor): the input tensor containing probabilities
            with_replacement (bool): whether to draw with replacement or not
            size (int): number of samples to draw
        
        Returns:
            T, shape = (N * Nneg, 1), dtype = torch.long: Tensor of negative samples generated by multinomial distribution.
        """
        samples = torch.multinomial(self.weights, size, replacement=self.with_replacement)
        return samples.long()
